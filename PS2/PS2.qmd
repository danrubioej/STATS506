---
title: "PS2"
author: "Daniel Rubio"
format: html
editor: visual
self-contained: true
---

# PS2

Daniel Rubio, 9/26/24

As an aid to my problem solving, I used UM GPT to probe for explanations when I was confused, and for suggestions of possible built in functions to use. I did not copy and paste the prompts into the AI, but rather used it to answer the questions I had as they arose.

# Problem 1: Dice Game

## (a)/(b)

### i. Using a loop

```{r}

#' Function that plays Dice game using a for loop
#'
#' @param x the number of plays
#'
#' @return The net number of won or lost dollars after 'x' plays
#'
play_dice_1 <- function(x) {
  winnings <- 0
  
  for (i in 1:x) {
    #print(winnings)
    roll <- floor(runif(1,1,7))
    if ((roll == 3)||(roll == 5)){
      winnings <- winnings + 2*roll 
    } 
    else {
      winnings <- winnings - 2
    }
  }
  
  return(winnings)

}

play_dice_1(3)
play_dice_1(30)
play_dice_1(300)
play_dice_1(3000)
```

### ii. Using an R vectorized function

```{r}

#' Function that plays Dice game using vectorized functions
#'
#' @param x the number of plays
#'
#' @return The net number of won or lost dollars after 'x' plays
#'
play_dice_2 <- function(x) {
  rolls <- floor(runif(x,1,7))
  rolls[rolls == 6] <- -2 # This is a dangerous way to do it, originally this line was last and it was overriding all the 3 rolls that had previously become 6. However since this is for a timing problem I moved this to first and it works now
  rolls[rolls == 1] <- -2
  rolls[rolls == 2] <- -2
  rolls[rolls == 3] <- 6
  rolls[rolls == 4] <- -2
  rolls[rolls == 5] <- 10
  
  winnings = sum(rolls)
  
  return(winnings)
}
play_dice_2(3)
play_dice_2(30)
play_dice_2(300)
play_dice_2(3000)
```

### iii. Using table()

```{r}
#' Function that plays Dice game using table()
#'
#' @param x the number of plays
#'
#' @return The net number of won or lost dollars after 'x' plays
#'
play_dice_3 <- function(x) {
  rolls <- floor(runif(x,1,7))
  results <- table(rolls)
  outcomes <- c("1"=-2,"2"=-2,"3"=6,"4"=-2,"5"=10,"6"=-2)
  winnings <- 0
  
  for (i in 1:length(results)){
    num_name <- names(results)[i]
    winnings <- winnings + results[num_name]*outcomes[num_name]
  }
  
  return(winnings[[1]])
}
play_dice_3(3)
play_dice_3(30)
play_dice_3(300)
play_dice_3(3000)

```

### iv. Using apply()

```{r}
#' Function that plays Dice game using apply()
#'
#' @param x the number of plays
#'
#' @return The net number of won or lost dollars after 'x' plays
#'
play_dice_4 <- function(x) {
  rolls <- floor(runif(x,1,7))
  
  results <- sapply(rolls, function(x){
    if(x==3){return(6)}
    else if(x==5){return(10)}
    else{return(-2)}
  })
  winnings <- sum(results)
  return(winnings)
}
play_dice_4(3)
play_dice_4(30)
play_dice_4(300)
play_dice_4(3000)
```

## (c)

```{r}
three_ans <- vector(length=4)
three_thou_ans <- vector(length=4)
set.seed(2024)
three_ans[1] <- play_dice_1(3)
set.seed(2024)
three_ans[2] <- play_dice_2(3)
set.seed(2024)
three_ans[3] <- play_dice_3(3)
set.seed(2024)
three_ans[4] <- play_dice_4(3)

set.seed(2024)
three_thou_ans[1] <- play_dice_1(3000)
set.seed(2024)
three_thou_ans[2] <- play_dice_2(3000)
set.seed(2024)
three_thou_ans[3] <- play_dice_3(3000)
set.seed(2024)
three_thou_ans[4] <- play_dice_4(3000)

print(three_ans)
print(three_thou_ans)
```

## (d)

```{r}
#install.packages("microbenchmark") # ran once
library(microbenchmark)
few_rounds <- 1000
low_in <- microbenchmark(
  play_dice_1 = play_dice_1(few_rounds),
  play_dice_2 = play_dice_2(few_rounds),
  play_dice_3 = play_dice_3(few_rounds),
  play_dice_4 = play_dice_4(few_rounds)
)
print(low_in) # units are microseconds
```

```{r}
many_rounds <- 100000
high_in <- microbenchmark(
  play_dice_1 = play_dice_1(many_rounds),
  play_dice_2 = play_dice_2(many_rounds),
  play_dice_3 = play_dice_3(many_rounds),
  play_dice_4 = play_dice_4(many_rounds)
)
print(high_in) # units are miliseconds
```

The built in R-vectorization is the fastest for the smaller and the larger cases of the gameplay. This makes sense as from what I understand since R vectorization calls down to C. For small cases, it seems as though table() and loops take similar amount of time, in fact some of the time loops are slightly faster than table(). For larger cases the table() method becomes noticeably faster than loops. Apply is consistently the second fastest but vectorized is the clear winner.

## (e)

```{r}
set.seed(2024) # for reproducability

num_simulations <- 10000

results <- numeric(num_simulations)
num_plays <- floor(runif(num_simulations,1,100000))

for (i in 1:num_simulations) {
  results[i] <- play_dice_2(num_plays[i])
}

summary(results)

t_test_results <- t.test(results, mu = 0)
print(t_test_results)

```

The above code runs 10,000 games each with anywhere between 1 and 100,000 rolls each. If this game were fair then the mean score would be 0, which based on the 10,000 results and a t-test on the data seem to decisively not be true. Therefore based on my Monte Carlo simulation I don't think it's a fair game from the house perspective, but I would love to play it as it seems very in favor of the roller.

```{r}
rm(list=ls())
```

# Problem 2: Linear Regression

## (a)

```{r}
df <- read.csv("cars.csv")
names <- c("height",'length','width','drive','engine','is_hybrid','n_gears','transmission',
           'c_mpg','fuel','h_mpg','classification','id','make','model_year','year','hp','tor') 
colnames(df) <- names
```

## (b)

```{r}
nrow(df)
df <- df[df$fuel== "Gasoline",]
nrow(df)

```

## (c)

```{r}
boxplot(df$h_mpg)
```

There is an outlier here, 2011 Chevy Silverado Hybrid appears to have a 223 highway mpg. This is clearly untrue. According to the internet the true value is 23 mpg. I will update this

```{r}
df$h_mpg[which(df$h_mpg == 223)] <- 23
boxplot(df$h_mpg)
```

```{r}
hist(df$h_mpg)
```

After the removal of the outlier, the data seems normal enough that it would not require any further transformation.

## (d)

```{r}
df$cat_year <- as.factor(df$year)
model <- lm(h_mpg ~ tor + hp + height + length + width + cat_year, data=df)
summary(model)
```

The estimate coefficient for torque is about -0.052. This means that for all other variables held constant, for the increase of one unit (likely pound-feet, although the original table does not specify) of torque, the highway mpg will go down by about 0.052 miles per gallon.

## (e)

```{r}
#table(df$cat_year)
model2 <- lm(h_mpg ~ tor*hp + height + length + width + cat_year, data=df)
summary(model2)


```

```{r}
#install.packages("emmeans")
#install.packages("ggplot2")
library(emmeans)
reasonable_torques <- seq(min(df$tor),max(df$tor),length.out = 100)
reasonable_hps <- quantile(df$hp,probs=c(0.25,0.5,0.75))
emmip(model2, ~ tor|hp, at=list(hp=reasonable_hps, tor=reasonable_torques),)

```

Across the middle 50% of horsepowers, the slope between torque and highway mpg becomes less steep as horsepower increases.

## (f)

```{r}
X <- model.matrix(h_mpg ~ tor + hp + height + length + width + cat_year, data=df)
Y <- df$h_mpg

XtXinv <- solve(t(X) %*% X)
b_hat <- XtXinv %*% t(X) %*% Y

print(b_hat)
print(as.matrix(model$coefficients))
print(all.equal(b_hat,as.matrix(model$coefficients)))
```

The coefficients found from lm() and the linear algebra approach are indeed the same.
