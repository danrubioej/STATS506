---
title: "PS5"
author: "Daniel Rubio"
format: html
editor: visual
self-contained: true
---

## PS5

Daniel Rubio, 11/21/24

As an aid to my problem solving, I used UM GPT to probe for explanations when I was confused, and for suggestions of possible built in functions to use. I did not copy and paste the prompts into the AI, but rather used it to answer the questions I had as they arose.

# Problem 1: Object Oriented Programming

## (a) Defining "rational" class

Defining requested Rcpp functions:

```{r}
library(Rcpp)

#' Function that calls down to cpp and finds GCD
#'
#' @param A int
#' @param B int
#'
#' @return Greatest common denominator
#'
cGCD <- function(A,B) {
  ans <- evalCpp(paste0("std::gcd(",A, ", ", B, ")"))
  return(ans)
}
#' Function that calls down to cpp and finds LCM
#'
#' @param A int
#' @param B int
#'
#' @return Greatest common multiple
#'
cLCM <- function(A,B) {
  ans <- evalCpp(paste0("std::lcm(",A, ", ", B, ")"))
  return(ans)
}
```

Defining class:

```{r}
rational <- setClass("rational",
         slots = c(data = "numeric"))

setValidity('rational',function(object){
  # object must be in form c(numerator, denominator)
  if(length(object@data) != 2){
    stop("Input must be vector of length two")
  }
  if(object@data[1]!= round(object@data[1]) | object@data[2]!= round(object@data[2] )){
    stop("Numerator and denominator must be integers")
  }
  if(object@data[2] == 0){
    stop("Denominator must be non-zero")
  }
  return(TRUE)
})

```

Methods:

```{r}

setMethod("show", "rational",
  function(object) {
    cat(object@data[1], "/", object@data[2])
    cat("\n")
    return(invisible(object))
  }
)

setGeneric("simplify",
           function(object) {
             standardGeneric("simplify")})

setMethod("simplify", "rational",
  function(object) {
    num <- object@data[1]
    den <- object@data[2]
    com_denom <- cGCD(num,den)
    new_num <- num / com_denom
    new_den <- den / com_denom
    simplified <- rational(data = c(new_num,new_den))
    return(simplified)
  }
)
setGeneric("quotient",
           function(object,...) {
             standardGeneric("quotient")})

setMethod("quotient", "rational",
  function(object, digits = 8) {
    num <- object@data[1]
    den <- object@data[2]
    result <- num/den
    if(round(result,digits) == round(result,digits+1)){
      rest = ""
    }
    else{rest="..."}
    cat(round(result, digits),rest, sep="")
    cat("\n")
    return(invisible(result))
  }
)
```

Operations:

```{r}
##' @title `rational` addition
##'
##'
##' @param e1 A `rational`
##' @param e2 A `rational`
##' @return A `rational` that is the sum of e1 and e2
setMethod("+", signature(e1 = "rational", e2 = "rational"),
            function(e1, e2) {
            n1 <- e1@data[1]
            d1 <- e1@data[2]
            n2 <- e2@data[1]
            d2 <- e2@data[2]
            N = n1*d2+n2*d1
            D = d1*d2
            return(simplify(rational(data=c(N,D))))
            }
          )
##' @title `rational` subtraction
##'
##'
##' @param e1 A `rational`
##' @param e2 A `rational`
##' @return A `rational` that is the difference of e1 and e2
setMethod("-", signature(e1 = "rational", e2 = "rational"),
            function(e1, e2) {
            n1 <- e1@data[1]
            d1 <- e1@data[2]
            n2 <- e2@data[1]
            d2 <- e2@data[2]
            N = n1*d2-n2*d1
            D = d1*d2
            return(simplify(rational(data=c(N,D))))
            }
          )
##' @title `rational` multiplication
##'
##'
##' @param e1 A `rational`
##' @param e2 A `rational`
##' @return A `rational` that is the multiplication of e1 and e2
setMethod("*", signature(e1 = "rational", e2 = "rational"),
            function(e1, e2) {
            n1 <- e1@data[1]
            d1 <- e1@data[2]
            n2 <- e2@data[1]
            d2 <- e2@data[2]
            N = n1*n2
            D = d1*d2
            return(simplify(rational(data=c(N,D))))
            }
          )
##' @title `rational` division
##'
##'
##' @param e1 A `rational`
##' @param e2 A `rational`
##' @return A `rational` that is e1 divided by e2
setMethod("/", signature(e1 = "rational", e2 = "rational"),
            function(e1, e2) {
            n1 <- e1@data[1]
            d1 <- e1@data[2]
            n2 <- e2@data[1]
            d2 <- e2@data[2]
            N = n1*d2
            D = d1*n2
            return(simplify(rational(data=c(N,D))))
            }
          )
```

## (b) Using "rational" class

```{r}
r1 = rational(data = c(24,6))
r2 = rational(data = c(7,230))
r3 = rational(data = c(0,4))
```

```{r, error=TRUE}
r1
r3
r1 + r2
r1 - r2
r1 * r2
r1 / r2
r1 + r3
r1 * r3
r2 / r3
quotient(r1)
quotient(r2)
quotient(r2, digits = 3)
quotient(r2, digits = 3.14)
quotient(r2, digits = "avocado")
q2 <- quotient(r2, digits = 3)
q2
quotient(r3)
simplify(r1)
simplify(r2)
simplify(r3)
```

## (c) Not creating impossible rationals, other bad inputs

```{r, error=TRUE}
r4 = rational(data = c(1,0))
r5 = rational(data = c(1,2,3))
r6 = rational(data = c(1))
r7 = rational(data = c("numerator","denominator"))
r8 = rational(data = c(1.2,4))
r8 = rational(data = c(1,4.3))
r9 = rational(data = 2/9)
```

```{r}
rm(list=ls())
```

# Problem 2: plotly

## (a)

Load in data

```{r}
data <- read.csv("df_for_ml_improved_new_market.csv")
# install.packages("tidyverse") ran once
# install.packages("plotly") ran once
library(tidyverse)
library(plotly)
```

Regenerate plot

```{r}
genres = c("Photography","Print","Sculpture","Painting","Others")

data_long <- data %>% 
  pivot_longer(cols=starts_with("Genre___"), names_to = "Genre",values_to = "value") %>%
  filter(value==1) %>% 
  select(-value) %>% 
  mutate(
    Genre = fct_recode(
      Genre,
      "Others" = "Genre___Others",
      "Photography" = "Genre___Photography",
      "Print" = "Genre___Print",
      "Sculpture" = "Genre___Sculpture",
      "Painting" = "Genre___Painting"
    )
  )

g <- ggplot(data_long, aes(x=year,group=year, y=price_usd ) ) +
       geom_boxplot() +
  ggtitle("Artwork price Statistics by Genre 1997-2012")+
  scale_y_log10(name = "Price (USD)") +
  scale_x_continuous(breaks=seq(1997,2012, by=4), name="Year")+
  facet_wrap("Genre")
g
```

## (b)

Creating Interactive plot with plotly

```{r}
p <- plot_ly(data=data_long) |>
  add_boxplot(x = ~ year, y = ~ price_usd) |>
  add_boxplot(data=data_long[data_long$Genre=="Photography",],x = ~ year, y = ~ price_usd,visible=FALSE) |>
  add_boxplot(data=data_long[data_long$Genre=="Print",],x = ~ year, y = ~ price_usd,visible=FALSE) |>
  add_boxplot(data=data_long[data_long$Genre=="Sculpture",],x = ~ year, y = ~ price_usd,visible=FALSE) |>
  add_boxplot(data=data_long[data_long$Genre=="Painting",],x = ~ year, y = ~ price_usd,visible=FALSE) |>
  add_boxplot(data=data_long[data_long$Genre=="Others",],x = ~ year, y = ~ price_usd,visible=FALSE) |>
  layout(updatemenus = list(
  list(y = 1,
    buttons = list(
      list(method = "update",
           args = list(list(visible =  list(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)),
                       list(yaxis = list(title = "Price (USD)",type="log"))),
           label = "Over Time, Overall"),
      
      list(method = "update",
           args = list(list(visible =  list(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)),
                       list(yaxis = list(title = "Price (USD)",type="log"))),
           label = "Photography"),
      list(method = "update",
           args = list(list(visible =  list(FALSE, FALSE, TRUE, FALSE, FALSE, FALSE)),
                       list(yaxis = list(title = "Price (USD)",type="log"))),
           label = "Print"),
      list(method = "update",
           args = list(list(visible =  list(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)),
                       list(yaxis = list(title = "Price (USD)",type="log"))),
           label = "Sculpture"),
      list(method = "update",
           args = list(list(visible =  list(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE)),
                       list(yaxis = list(title = "Price (USD)",type="log"))),
           label = "Painting"),

      list(method = "update",
           args = list(list(visible =  list(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)),
                       list(yaxis = list(title = "Price (USD)",type="log"))),
           label = "Others"))
  )
)) |>
  layout(yaxis = list(title = "Price (USD)",type = "log"), 
         xaxis = list(title = "Year"),
         title = "Artwork price Statistics by Genre 1997-2012") 

p
```

```{r}
rm(list=ls())
```

# Problem 3: PS4-1 data.table

Setting up problem with data.table

```{r}
#install.packages("nycflights13") # Ran once
# install.packages("tidyverse") # Ran once
library(nycflights13)
library(data.table)

flights <- as.data.table(flights)
airports <- as.data.table(airports)
planes <- as.data.table(planes)
```

## (a)

```{r}
flights[ , 
         .(mean_delay = mean(dep_delay, na.rm = TRUE),
            median_delay = median(dep_delay,na.rm = TRUE))
         ,by=origin] |> # First dt call calculates mean  and median delay by origin
  merge(x=_, airports,
        by.x = "origin",
        by.y = "faa")|> # merge with airports table to get name joining on  origin/faa code
  _[ , .(name, median_delay, mean_delay)] # print out name and stats

```

```{r}
flights[, .N , by = dest] |> # gets how many rows of each dest there are 
  _[N>=10] |>  # filters all the rows with less than 10 flights
  merge(x = _, y = flights)|> # merges these rows applying the filter to the main data
  _[ , .(mean_delay = mean(arr_delay, na.rm = TRUE),
        median_delay = median(arr_delay,na.rm = TRUE))
    , by = dest] |> # call calculates mean and median arrival by dest on filtered dests
  merge(x=_, airports,
        by.x = "dest",
        by.y = "faa")|># merge with airports table to get name joining on  dest/faa code
  _[ order(-mean_delay), .(name, median_delay, mean_delay)] # print out name and stats

```

## (b)

```{r}
merge(flights, planes, by = "tailnum") |> # merge tables to get model name
  _[ , .(avg_speed_mph = mean(distance/(air_time/60), na.rm=TRUE), .N),by = model]|> # calculates averae speed in mph for each model alongside number of flights flown 
  _[avg_speed_mph == max(avg_speed_mph)] # returns only the fastest model

```

```{r}
rm(list=ls())
```
