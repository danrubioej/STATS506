---
title: "PS6"
author: "Daniel Rubio"
format: html
editor: visual
self-contained: true
---

## PS6

Daniel Rubio, 12/05/24

As an aid to my problem solving, I used UM GPT to probe for explanations when I was confused, and for suggestions of possible built in functions to use. I did not copy and paste the prompts into the AI, but rather used it to answer the questions I had as they arose.

# Stratified Bootstrapping

Loading data:

```{r}
rm(list=ls())
```

```{r}
# Packages
library(DBI)     # For interfacing with a database
library(data.table)
library(dplyr)

# Import the SQLite database of the Lahman data
lahman <- dbConnect(RSQLite::SQLite(), "lahman_1871-2022.sqlite")
lahman
dbListTables(lahman)
team_key <- dbGetQuery(lahman, "SELECT teamID, name FROM Teams")
fielding_table <- dbGetQuery(lahman,"SELECT * FROM Fielding")
```

## (a)

Setting up the RF data

```{r}
ft <- as.data.table(fielding_table)
ft <- ft[ft$InnOuts != 0, ]   # Remove rows with zero InnOuts
ft$RF <- 3 * (ft$PO + ft$A) / ft$InnOuts
ft <- ft[!is.na(ft$RF), ]     # Remove rows with NA RF

# Calculate the mean RF for each team
mean_RF <- ft [ , .(mean_RF = mean(RF, na.rm = TRUE)), by=teamID]
n_teams <- nrow(mean_RF)
reps <- 1000

# Function to perform stratified sampling for one replication with standard deviation by team
bootstrap_sample <- function() {
  boot_sampling <- ft[ , .SD[sample(.N, .N, replace = TRUE)], by = teamID]
  team_sds <- boot_sampling[, .(sd_RF = sd(RF, na.rm = TRUE)), by = teamID]
  return(team_sds)
}
```

## i. non-parallel bootstrapping

```{r}
# Perform bootstrap
set.seed(77242992)  # For reproducibility
non_p_time <- system.time({
sds_1 <- lapply(1:reps, function(i) bootstrap_sample())

# Combine all bootstrap results into a data.table
combined_sds_1 <- rbindlist(sds_1, idcol = "iteration")

# Calculate the mean of the standard deviations for each team across all iterations
mean_sd_per_team_1 <- combined_sds_1[, .(mean_sd_RF_1 = mean(sd_RF, na.rm = TRUE)), by = teamID]
})
summary(mean_sd_per_team_1)
```

## ii. parallel bootstrapping

```{r}
library(parallel)

# Perform bootstrap using paralel function
set.seed(77242992)  # For reproducibility
parallel_time <- system.time({
sds_2 <- mclapply(1:reps, function(i) bootstrap_sample())

# Combine all bootstrap results into a data.table
combined_sds_2 <- rbindlist(sds_2, idcol = "iteration")

# Calculate the mean of the standard deviations for each team across all iterations
mean_sd_per_team_2 <- combined_sds_2[, .(mean_sd_RF_2 = mean(sd_RF, na.rm = TRUE)), by = teamID]
})
summary(mean_sd_per_team_2)
```

## iii. future bootstrapping

```{r, warning=FALSE}
#install.packages("future")

library(future)

plan(multicore,workers = 6) # I have 11 cores

set.seed(77242992)  # For reproducibility
future_time <- system.time({
  
futures <- lapply(1:reps, function(i) future(bootstrap_sample()))

sds_3 <- lapply(futures,value)

# Combine all bootstrap results into a data.table
combined_sds_3 <- rbindlist(sds_3, idcol = "iteration")

# Calculate the mean of the standard deviations for each team across all iterations
mean_sd_per_team_3 <- combined_sds_3[, .(mean_sd_RF_3 = mean(sd_RF, na.rm = TRUE)), by = teamID]
})

summary(mean_sd_per_team_3)
```

## (b)

```{r}
top_10 <- mean_RF[order(-mean_RF),,][1:10,,]
top_10 <- top_10[mean_sd_per_team_1, on="teamID", nomatch=NULL]
top_10 <-top_10[mean_sd_per_team_2, on="teamID", nomatch=NULL]
top_10 <-top_10[mean_sd_per_team_3, on="teamID", nomatch=NULL]
top_10[order(-mean_RF)]
```

## (c)

```{r}
non_p_time
parallel_time
future_time
```

In my case, the parallel operations of the bootstrapping was the fastest by far. The non-parallel one was faster than the case using futures, but this may be due to the overhead in RStudio not allowing it to function as it would like to properly. I also may have set it up slightly incorrectly, but i gave it half of the number of cores I had (rounded up) which is what was said to be optimal in class. My standard deviations are extremely large, and while each one is relatively close to each other (per teamID) they are likely not accurate. I do not have the time to troubleshoot this and I don't know what I did wrong here, but I have to submit and move on.

```{r}
rm(list=ls())
```
